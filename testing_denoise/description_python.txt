gaussian filtering 
- cv2.GaussainBlur(img, ksize, sigmaX)
- 장점 : 가우시안 노이즈를 없애기에 좋음
- 단점 : 엣지, 텍스쳐가 같이 블러됨
- 파라미터 : ksize(커널사이즈), sigmaX(X 방향으로의 분산(?))


bilateral filtering
- cv2.bilateralFilter(src, d, sigmaColor, sigmaSpace)
- 가우시안 필터를 적용하고, 또 하나의 가우시안 필터를 주변 픽셀까지 고려하여 적용하는 방식
- 장점 : 경계선을 유지하면서 가우시안 필터링을 해줌
- 파라미터 : d(filtering 할 때 고려할 주면 픽셀 지름), sigmaColor(Color를 고려할 공간, 숫자가 크면 멀리있는 색도 고려함), sigmaSpace(숫자가 크면 멀리 있는 픽셀도 고려함)


NL-means
- cv2.faseNlMeansDenoising(src, dst, h, templateWindowSize, searchWindwoSize)
- 한 점이 아닌 그 주변부를 고려하여 스무딩 해줌. target 픽셀과 얼마나 비슷한지를 보고 이미지 전체를 스무딩 해줌
- 파라미터 : h(regulating strength), templateWindowSize(weight를 계산할 때 패치사이즈, 홀수여야 함), searchWindowSize(wighted average를 계산할 때 사용되는 window 사이즈)


total variation
- skimage.restoration.denoise_tv_bregman(image, weight, max_iter=100, eps=0.001, isotropic=True)
- 파라미터 : weight(Denoising weight. The smaller the weight, the more denoising (at the expense of less similarity to the input)), eps(the stop criterion), max_iter(Maximal number of iterations), isotropic(boolean, Switch between isotropic and anisotropic)


anisotropic diffusion
- medpy.filter.smoothing.anisotropic_diffusion(img, niter, kappa, gamma, voxelspacing, option)
- 파라미터 : niter(이터레이션 수), kappa(전도(?) 변수, 20~100), gamma(diffusion의 속도를 조절, <=.25), voxelspacing(img.ndim 방향으로의 인접한 픽셀 사이의 거리 (?)), option(1,2, 1은 고대비 엣지를 좋아함, 2는 저대비 엣지를 좋아함)


wavelet
- skimage.restoration.denoise_wavelet(image, sigma=None, wavelet='db1', mode='soft', wavelet_levels=None, multichannel=False, convert2ycbcr=False, method='BayesShrink')
- 파라미터 : sigma(The noise standard deviation used when computing the wavelet detail coefficient threshold(s). When None (default), the noise standard deviation is estimated), wavelet(The type of wavelet to perform and can be any of the options pywt.wavelist outputs. The default is ‘db1’. For example, wavelet can be any of {'db2', 'haar', 'sym9'} and many more.), mode({‘soft’, ‘hard’}, the type of denoising performed. It noted that choosing soft thresholding given additive noise finds the best approximation of the original image.), wavelet_levels(int, The number of wavelet decomposition levels to use. The default is three less than the maximum number of possible decomposition levels.), method({‘BayesShrink’, ‘VisuShrink’})


DWT(discrete wavelet transformation 인데 wavelet이랑 같은건가…?)
- https://pdfs.semanticscholar.org/2f6f/f0cb1e7ed90ebd5572a5dfbba35b2a0b82fa.pdf
- 코드 https://pywavelets.readthedocs.io/en/0.2.2/
