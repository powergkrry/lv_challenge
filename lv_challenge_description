Ground Truth를 만들기 위해서는 contour파일을 이용해야 하는데 제공된 contour파일을 보면 파일 이름의 시작이 모두 IM-0001이어서 어떤 사진의 contour파일인지 확인이 불가능하다. 그래서 match_contour.m 으로 원본 이미지와 contour파일을 연결지었다.

contour파일이 150개인 경우 원본 이미지는 최소 150개가 있어야 한다. 예를들어 IM-0001로 시작하는 원본 이미지가 100개, IM-0002로 시작하는 원본 이미지가 160개라면 IM-0001은 contour파일과 매칭시키기에 이미지가 부족하기 때문에 IM-0002 이미지가 매칭된다. 이렇게 contour파일 수 보다 더 많은 이미지를 갖고 있는 것을 찾고 match_contour.m으로 contour이미지를 만들어 확인해(/hoem04/powergkrry/lv_challenge/match_contour 에서 그 이미지를 확인할 수 있다.) contour파일을 매칭시켰다. 매칭된 결과는 match_contour_txt 이다.

contour파일을 무엇과 매칭시킬지 알았으니 contour파일의 이름을 매칭시킬 이미지 이름으로 바꿔주어야 한다. change_contour_name.py로 /hoem04/powergkrry/lv_challenge/data/ 안에 바꾼 contour파일을 저장한다. 그 후 각 파일을 icontour.txt, ocontour.txt, pcontour_txt 폴더로 옮겨준다.

각 contour파일을 contourtxt_to_png.m 으로 png로 변환해 contour_png 폴더에 저장한다.

원본 이미지를 .dcm에서 .png로 변환해야한다. 변환해야 할 dcm파일을 script_for_copy_dcm.txt에 있는 script로 /hoem04/powergkrry/lv_challenge/data/original_dcm 에 복사한다. 그 후 dcm_to_png.m 으로 .png로 변환한다. 이 때 타입은은 uint8이며 이미지 확인을 위해 imadjust를 이용해 [0, 2^8]으로 rescaling 한다.

데이터의 수가 부족하기 때문에 data augmentation을 위해 diffusion의 정도에 따라 다른 이미지를 만들어 이용해본다. make_diffusion_png.py 를 실행한다. 동시에 flip(horizon, vertical, both, none), rotate(right, left)를 진행한다.

그 후 train test 데이터셋으로 분할하기 위해 copy_img_dataset.sh 를 실행한다. pcontour의 경우 총 161장의 사진이 있다. 이를 train 129장 test 32장으로 분할한다.
